---
title: "Rapport stage d'été 2023 : Crowdsourcing and Deep Learning with Peerannot"
title-block-banner: true
format:
  html:
    toc: true
    theme: [darkly, sass_variable.scss]
    html-math-method: katex
bibliography: biblio.bib
number-sections: true
toc: true
toc-depth: 3
toc-title: Sommaire
jupyter: python3

abstract: |
  &nbsp; &nbsp; Voici le rapport du stage effectué en Juin et Juillet 2023 à l'Institut Montpelliérain Alexander Grothendieck. Ce dernier va se découper en deux grosses parties :

  - la première visant à rappeler et expliqué un article de crowdsourcing [@guan2018said].
  - la seconde portera plus sur l'implémentation de la méthode de l'article à l'aide du package [Peerannot](https://peerannot.github.io/).
author:
  - name: Alexandre CAPEL
date: 2023-07-05
---


## Explication de l'article Who Said What [@guan2018said]
### Mise en contexte 

&nbsp; &nbsp; Il arrive souvent qu'une donnée ne soit pas perçue de la même manière d'un travailleur à l'autre. Cela peut dépendre de plusieurs paramètres comme par exemple :

 - l'expérience des travailleurs et leur fiabilité
 - la qualité des données : nombre de pixels dans une image par exemple.


Dans le dataset CIFAR10H, où chaque image appartient à un ensemble de 10 classes disjointes, il peut arriver qu'il nous soit difficile de choisir entre deux classes. 

![Chat ou chien ?](image_cifar10h.png){fig-alt="A drawing of an elephant." width=200}

Un cas concret où la labélisation d'une image n'est pas évidente, c'est lorsque l'on doit effectuer un diagnositic médical. Dans [@guan2018said], on se place dans un cadre un groupe de médecins étiquettent des dépistages  de la rétinopathie diabétique (diabetic retinopathy, DR) en cinq classes différentes : 

- Pas de DR 
- DR bénin (non proliférative)
- DR moyen
- DR sévère
- DR proliferative

IMAGE DES DIFFERENTES CLASSES


Chaque image sera traité par une petite partie de ce groupe de médecin (aléatoirement) et chaque médecin va étudier une petite partie de l'ensemble des dépistages.

On peut facilement se persuader ici que chaque expert va donner son propre diagnostic (éventuellement différents les uns des autres) du fait du potentiel bruit qui se trouve dans ces images.

C'est dans ce cadre que [@guan2018said] va chercher à trouver un "véritable" diagnostic, que l'on utilisera ensuite pour entraîner notre modèle. 

### Modèle de crowdsourcing

&nbsp; &nbsp; Pour répondre à la problématique, [@guan2018said] ont d'abord fixé leur modèle. Dans le cadre des médecins, ils vont modéliser chacun d'eux avec la base d'Inception-v3 qu'ils vont ensuite entraîner avec les opinions du médecin qu'il modélise.
Par exemple, si le dataset comporte un jeu de données où le total des médecins ayant étiqueté au moins une image est de 31, nous devrons entraîner 31 modèles. 


:::{.callout-warning appearance="simple"}
## Attention
On voit assez rapidement, qu'en fonction du nombre d'expert du jeu de données, la mise en place du modèle sera plus au moins longue... De plus, on peut potentiellement être confronté à un nombre de donnée trop bas pour certains médecins. Ces contraintes sont à prendre en compte dans un tel modèle.
:::

### Exemples de statégie pour fusionner les opinions


&nbsp; &nbsp; Une fois que nous possèdons tout ces médecins modélisés, il va falloir réunir l'ensemble de leur opinion pour pouvoir en proposer une globale pour le modèle général et étiqueter de nouvelles données. Il y a des manières très intuitives que nous allons exposer ici.

On se place dans le cas où il y a $N$ experts et $C$ classes. On notera $p_j(c)$ la prédiction de la classe $c$ du modèle représentant l'expert $j$.

#### **Le vote majoritaire**

&nbsp; &nbsp; Ce cadre là est assez explicite. L'idée est d'organiser un vote des experts et sélectionner la classe ayant le plus de voix. Mathématiquement, si on note $\hat{p}_j =\underset{c \in \llbracket 1,C \rrbracket}{\text{argmax}}~(p_j(c))$, alors la prédiction du modèle sera :
$$
\hat{Y}_c =  \frac{1}{N}\sum_{j=1}^{N} \mathbb{1}_{\hat{p}_j=c}
$$

Ici, la classe ayant la probabilité la plus haute sera celle ayant reçu le plus de voix.


#### **L'expert moyen**

&nbsp; &nbsp; Ce paradigme est sûrement le plus simple et évident de la liste. Il consiste à utiliser les prédictions de chaque expert et de faire une moyenne en utilisant un poids uniforme pour chaque expert. On peut le calculer :

$$
Y_c = \frac{1}{N}\sum_{j=1}^{N}p_j(c)
$$

Il modélise ce qu'est censé dire un expert "moyen" (par rapport à l'ensemble des experts du modèle).

#### **Pondérer en fonction de la fiabilité**

&nbsp; &nbsp; On peut assez rapidement constater que la stratégie précédente est assez rudimentaire. En effet, on pourrait lui reprocher de ne pas prendre en compte la fiabilité de l'expert : un médécin assez médiocre (si il y en a un) possèdera un poids égal à celui d'un expert excellent. On voudrait donc trouver un moyen de donner un poids plus important aux médecins plus fiable, on obtiendra alors une prédiction de la forme :

$$
Y_c = \sum_{j=1}^{N}w_jp_j(c) ~~~~~~~\text{où  } \sum_{j=1}^{N}w_j=1
$$

Un premier moyen de procédé est de se référer à un score de fiabilité qu'aurait chacun des experts et de baser les poids sur ces résultats là. Un score possible serait par exemple de regarder avec un dataset de test le nombre de bonne réponse que donne chacun des modèles. Si on note $sc_j$ le score du modèle $j$ par rapport au dataset de test, on posera :

$$
w_j = \frac{sc_j}{\sum_{k=1}^{N}sc_k} 
$$


### Méthode de [@guan2018said]

&nbsp; &nbsp; La méthode de [@guan2018said] se base sur ce paradigme mais propose un calcul des poids différents. Ici, plutôt que de calculer séparément les poids $w_j$, nous allons les entraîner comme un modèle classique, en utilisant un descente de gradient et une fonction de perte. La différence principale avec la méthode précédente est qu'elle permet de faire un lien entre les différents experts. Dans un tel cadre, même si un modèle possède les mêmes performances que les autres mais que ce dernier fait des erreurs très différentes, alors ça aura tendance à augmenter son poids car il sera plus utile au moment de faire la moyenne.

**Mais comment procéder ?** 

Supposons que nous avons déja entainé nos $N$ modèles représentant chaque expert. Pour entrainer nos poids, nous allons réutiliser le même dataset avec lequel on a entrainé chacun de nos modèles. Ainsi, pour une image, nous allons utiliser les opinions des experts qui ont réellement étiqueté cette dernière pour produire une distribution associée. On définit cette distribution comme la prédiction target de cette image. Nous utiliserons ensuite la prédiction des modèles des autres experts pour optimiser les poids.

Par exemple, pour une image donnée, notons $I$ l'ensemble des médecins qui ont voté sur cette image. Notons également par $y_i \in \mathbb{R^C}$ l'opinion de l'expert $i \in I$. Pour chaque expert $j \in \llbracket 1,N \rrbracket$, on notera $p_j \in \mathbb{R}^C$ la prédiction de son modèle. On pose $w_j$ le poids du modèle $j$ (avec bien sûr $\sum_j w_j =1$). On évaluera ensuite la fonction de perte en utilisant la prédiction suivante :

$$
\frac{\sum_{i \notin I} w_i p_i}{\sum_{j \notin I} w_j}
$$

et la cible sera : 

$$
\frac{1}{|I|} \sum_{i \in I} y_i
$$

où nous mettrons à jour les paramètres par back propagation.

::: {.callout-note appearance="simple"}
## Remarque
Nous n'avons à aucun moment ajouter de données supplémentaires, par rapport à celles utilisées pour entraîner les modèles d'experts.
:::


### Pourquoi les erreurs des experts ne posent pas de problème

Une question intuitive survient assez rapidement avec ce genre de modèle : les experts restant des humains, il peut arriver que ces derniers se trompent, ces erreurs ne nuisent-elles pas à la qualité de classification de nos modèles ?

Pour répondre à cette question, faisons quelques simulations. Nous allons prendre le célèbre dataset MNIST, sur lequel nous allons entrainer un modèle et ensuite estimer son taux d'erreur. Ce modèle sera vu comme le modèle d'un expert qui ne fait jamais d'erreur. Puis nous allons progressivement baisser la fiabilité de l'expert en changeant aléatoirement les labels du dataset d'entrainement avec une probabilité de plus en plus grande. Puis on estimera à nouveau chaque taux d'erreur. 

Pour expérimenter, nous allons utiliser un modèle assez simple, dont le code est affiché ci-dessous :  

```{python}
#| eval: false
#| code-fold: true
#| code-summary: "Voir le modèle"
import torch.nn as nn
import torch.nn.functional as F 

class test_model(nn.Module):
    '''
    Réseau de neurone emprunter sur Pytorch.org.
    '''
    def __init__(self):
        super(test_model, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16*4*4, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16*4*4)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x
```

Nous allons donc utiliser les codes écrits en annexes pour pouvoir arriver à calculer notre courbe. Trève d'explication, voici le graphique que nous obtenons :

<iframe src="./grap_noise.html" width="100%" height="500px"></iframe>

Regardons ce graphique un peu plus près. Nous voyons ici que lorsque notre expert est parfait et ne fait pas d'erreur, le modèle est assez performant, le taux d'erreur sur le jeu de données test est de $1.14 \%$. Pourtant, on remarque ici qu'en corrompant les données avec une probabilité de $0.5$, le taux d'erreur n'augmente seulement jusqu'à $2.28 \%$, une différence qui n'est pas non plus aberrante. On peut même aller jusqu'à changer aléatoirement en label incorrect avec une probabilité de 0.8, le modèle qu'on entraînera n'aura qu'un taux d'erreur de $7.43 \%$ !

:::{.callout-note collapse="true"}
## Remarque
On voit que la suite n'est pas très intéressante vue que le taux d'erreur va croitre très rapidement vers $1$ après $0.8$.
:::

Ainsi, nous pouvons, à l'aide de cet exemple, constater que les erreurs des experts n'affectent pas drastiquement la qualité de prévison des modèles (même lorsque que l'expert n'est pas fiable est fait beaucoup d'erreur !). On peut espérer que cela se généralise dans d'autres modèles. (On a tester avec un autre dataset et une autre architecture, le résultat est bien moins satisfaisant)


## Implémentation avec Peerannot

Il est temps de mettre en pratique ce que nous avons appris pour l'intégrer dans la librairie Peerannot.

### Présentation de Peerannot 

L'objectif principal de Peerannot et d'aider à la gestion de labels crowdsoucé dans des problèmes de classficiation. Il va permettre notamment de définir un format "standard" de dataset de crowdsourcing, pour pouvoir faciliter leur utilisation dès lors que nous voulons effectuer différentes stratégies d'apprentissage et ceux sans devoir recoder de nouveaux algorithmes pour chaque dataset. 

:::{.callout-tip appearance="simple"}
## Des informations supplémentaires
Le formatage des datasets est expliqué sur le site de [Peerannot](https://peerannot.github.io/), et nous nous baserons sur ce format pour produire nos algorithmes.
:::

### Setup expérimental

#### Le dataset
Nous allons utiliser ici CIFAR10H, un dataset crowdsourcé d'images de taille $32\times 32$ colorées appartenant à 10 classes. On dispose de 9500 images d'entrainement, et 500 images de validation, chacunes annotées par un certains nombre de personne parmis 2571 experts. Chacune de ces 9500 images ont été étiquettées par au moins 63 personnes, et les experts ont voté pour au moins 181 images.

On disposera enfin d'un set de 50000 images test, pour évaluer les performances de nos futurs modèles.

#### L'architecture

Pour chaque modèle d'expert, nous utiliserons un ResNet18 préentrainé, sur lequel gélerons toutes les couches sauf la dernière (ou seulement la couche ``model.fc``). On entraînera nos modèles avec une cross entropy loss et une descente de gradient stochastique.

### Les experts sont-ils fiables ?

### Implémentation

Comme nous l'avons expliqué plus tôt, l'implémentation va se séparer en deux parties distinctes : l'entraînement des modèles experts, et l'entraînement des poids.

#### Entraînement des modèles

Dans notre contexte, nous souhaitons entraîner 2571 modèles à partir d'un ResNet18.

:::{.callout-warning appearance="simple"}
## Attention
Nous savons que chaque modèle aura au moins un dataset de taille 181 mais au plus de taille 196. Il va donc falloir faire des concessions pendant l'entrainement
:::

Pour se faire, nous allons alors avec des poids déjà préetrainé à l'aide de IMAGENET, geler les première couches de chaque modèle et n'entraîner que les dernières. La question est de savoir si nous utiliserons la dernière couche ou seulement la couche ``model.fc``. Pour pouvoir trancher, nous avons donc commencé par tracer la courbe d'apprentissage et de validation sur les deux modèles, le code correspondant est `Code/crowd_models/learning_curve.py`: 

<iframe src="./learning_curve.html" width="100%" height="500px"></iframe>

De ce graphique, on déduit deux choses :

- il n'est pas nécessaire d'aller au delà de 100 epochs pour mieux apprendre

- `Net` (celui avec juste la couche ``model.fc``) possède une performance quasiment équivalente à `Net2` qui demande plus de paramètres à estimer.(PAS CONVAINCU EN DISCUTER)

Nous avons donc toutes nos informations pour pouvoir entraîner nos modèles correctement. 

Or, nous remarquons que avec `peerannot`, le format du `.json` des labels n'est pas adapté à l'entraînement de nos experts. Nous allons donc devoir faire tout un travail de mise en place des datasets et les codes correspondant se trouverons dans le fichier `setup_datasets.py`. Ainsi, une fois le dataset prêt, nous avons entraîné chaque modèle tout un week-end et nous les avons enregistrés dans un dossier appelé `expert_models`. Voici le code pour l'entraînement (seulement):

```{python}
#| eval: false
#| code-fold: false
#| code-summary: "Entraînement des modèles"

# dataset_all est une liste de dataset adapté pour 
# l'entraînement de chaque modèle

for i in range(n):
    print(i, end="\r")
    if len(dataset_all[i])%32==1:
        trainset = DataLoader(dataset_all[i],  batch_size=30, 
                              shuffle=True, num_workers=2)
    else:
        trainset = DataLoader(dataset_all[i],  batch_size=32, 
                              shuffle=True, num_workers=2)
    Net = networks('resnet18', n_classes=10, pretrained=True).to("cuda")
    gel(Net)  # gèle selon la méthode que l'on a validé
    optimizer = optim.SGD(Net.parameters(), lr=0.001, momentum=0.9)
    for j in range(epochs):
        train(trainset, Net, optimizer, loss, ongoing=False)
    torch.save(Net.state_dict(), f"./expert_models/model-{i}_weights.pth")

print("Tout le monde est entrainé !")

```

On voit dans le code précédent un test avant le chargement du Dataset pour savoir si on entraîne les modèles avec des min-batches de taille 30 ou 32. En réalité, il se trouve que pour certains experts, le dernier mini-batch était de taille 1 ce qui entraîner une erreur pendant l'entraînement. Dès lors, voila ce qu'affiche le terminal :

```{bash} 
ValueError: Expected more than 1 value per channel when training, got input size torch.Size([1, 512, 1, 1])
```
Cette erreur provient de 
(avec BN1 ça marche pas, problème avec le calcul de l'écart-type ?)

#### Entraînement des poids


Une fois que tous nos modèles sont bien enregistrer, il est temps de mettre en place l'entraînement de nos poids. Il a fallu d'abord créer un dataset comprenant l'image et la distribution associée à l'aide des votes des experts : nous avons accès facilement à ses information avec le format des dataset de `peerannot`. Toutes les fonctions utilisées pour construire le dataset est bien sur dans `setup_datasets.py`.

Un fois que nous avons le dataset, la première idée a été de charger tous les modèles dans une liste pour pouvoir ensuite appelé facilement ces derniers. Cependant, cela revenait à charger 2571 modèles et au bout du $480^e$ modèle, le terminal nous a affiché cette erreur : 

```{bash}
outofmemoryerror: cuda out of memory. tried to allocate 20.00 mib (gpu 0; 22.03 gib total capacity; 21.26 gib already allocated; 18.88 mib free; 21.36 gib reserved in total by pytorch) if reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation. see documentation for memory management and pytorch_cuda_alloc_conf
```

La mémoire nécessaire pour charger tous les modèles en même temps était trop importante pour le GPU, il a donc fallu changer de stratégie.

Ainsi, nous avons commencé par charger un modèle uniquement lorsqu'on en a besoin pour effectuer des calculs, seulement, cette méthode aussi était trop couteuse en mémoire.

```{python}
#| eval: false
#| code-fold: true
#| code-summary: "Entraînement des poids"

w = torch.ones(n_worker, dtype=float, requires_grad=True)/n_worker
param = nn.Parameter(w, requires_grad=True)
optimizer = optim.SGD([param], lr=0.01,momentum=0.9)
loss = nn.CrossEntropyLoss()

for batch, (X, lab) in enumerate(trainset):
    optimizer.zero_grad()
    model = networks('resnet18', n_classes=10, pretrained=False).to("cuda")
    p = torch.zeros((batch_size, n_classe), requires_grad=False).to("cuda")
    for i in range(batch_size):
        work_t = get_workers(X[i], dataset, obj_train, tot_worker)
        tot = 0
        for k in work_t:
            p[i] = p[i] + worker_pred(model, X, int(k))[i]*param[int(k)]    #prédiction du worker k sur l'item i
            tot = tot + param[int(k)]
        p[i] = p[i]/tot
    lossRes = loss(p, lab.to("cuda"))
    lossRes.backward()
    optimizer.step()

```

(les paramètres sont chargés dans la fonction `worker_pred` situé dans le module `models.py`).

Mais à ce moment là, une autre erreur a fait surface :

```{bash}
RuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [10]], which is output 0 of AsStridedBackward0, is at version 1666; expected version 1665 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
```

Il nous étais impossible de calculer le gradient (et donc fait la backpropagation...). On a du modifier la structure du code pour pouvoir nous permettre ce calcul primordial. Puis une nouvelle fois un problème de mémoire sur le GPU est arrivé, on a donc du rajouter trois lignes de code à la fin du calcul des prédictions pour supprimer le modèle et nettoyer la mémoire du GPU pour retirer toute trace éventuelle. Nous obtenons le code suivant :

```{python}
#| eval: false
#| code-fold: false
#| code-summary: "Entraînement des modèles"

tot_worker = list(t.keys())
w = torch.ones(n_worker, dtype=torch.float, requires_grad=True) / n_worker
param = nn.Parameter(w)
optimizer = optim.SGD([param], lr=0.01, momentum=0.9)
loss = nn.CrossEntropyLoss()

for batch, (X, lab) in enumerate(trainset):
    optimizer.zero_grad()
    pred = torch.zeros((batch_size, n_classe)).to("cuda")
    model = networks('resnet18', n_classes=10, pretrained=False).to("cuda")
    for i in range(batch_size):
        work_t = get_workers(X[i], dataset, obj_train, tot_worker)
        p = torch.zeros((n_worker, n_classe))
        sel_w = torch.zeros((n_worker, 1))
        for k in work_t:
            p[int(k)] = worker_pred(model, X, int(k))[i].detach()
            sel_w[int(k)] = 1
        pred[i] = (1/sel_w.t().matmul(param))*p.t().matmul(param)
    del model
    gc.collect()
    torch.cuda.empty_cache()
    lossRes = loss(pred, lab.to("cuda"))
    lossRes.backward()
    optimizer.step()
    # l'article ne précise pas si il faut softmax les poids 
    # pendant la boucle ou à la fin.
```

Finalement, le problème le plus embêtant est celui que l'on obtient avec ce code : le temps de calcul. Il semblerait que dans cette configuration, l'entraînement des poids pour seulement une epoch va durer 11 jours ! Le stage sera terminer avant la fin de la deuxième epoch. J'ai donc tenter de contourné le problème en ne solicitant qu'un sous ensemble (déterminé aléatoirement pour chaque mini-batch) des modèles pour réduire le temps de calcul. Le code final est donc celui-ci :

```{python}
#| eval: false
#| code-fold: true
#| code-summary: "Voir le modèle"
import numpy as np
n_worker = len(t)
w = torch.ones(n_worker, dtype=torch.float, requires_grad=True) / n_worker
param = nn.Parameter(w)
optimizer = optim.SGD([param], lr=0.01, momentum=0.9)
loss = nn.CrossEntropyLoss()

err = np.zeros(len(trainset))

for batch, (X, lab) in enumerate(trainset):
    workers = sample(list(t.keys()), 700)
    optimizer.zero_grad()
    model = networks('resnet18', n_classes=10, pretrained=False).to("cuda")
    if batch<len(trainset)-1:
        # pour faire coïncider la taille des batch pour savoir si il s'agit du dernier
        pred = torch.zeros((batch_size, n_classe)).to("cuda")
        for i in range(batch_size):
            work_t = get_workers(X[i], dataset, obj_train, workers)
            p = torch.zeros((n_worker, n_classe))
            sel_w = torch.zeros((n_worker, 1))
            for k in work_t:
                p[int(k)] = worker_pred(model, X, int(k))[i].detach()
                sel_w[int(k)] = 1
            pred[i] = (1/sel_w.t().matmul(param))*p.t().matmul(param)
    else:
        new_bsize = len(obj_train)%batch_size
        pred = torch.zeros((new_bsize, n_classe)).to("cuda")
        for i in range(new_bsize):
            work_t = get_workers(X[i], dataset, obj_train, workers)
            p = torch.zeros((n_worker, n_classe))
            sel_w = torch.zeros((n_worker, 1))
            for k in work_t:
                p[int(k)] = worker_pred(model, X, int(k))[i].detach()
                sel_w[int(k)] = 1
            pred[i] = (1/sel_w.t().matmul(param))*p.t().matmul(param)
    del model
    gc.collect()
    torch.cuda.empty_cache()
    lossRes = loss(pred, lab.to("cuda"))
    err[batch] = lossRes.item()
    lossRes.backward()
    optimizer.step()

```



### Comparaison des performances

## Conclusion et perspectives

Notre modèle est donc ?

